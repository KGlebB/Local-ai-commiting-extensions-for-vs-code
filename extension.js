// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
const vscode = require('vscode');
const util = require('util');
const exec = util.promisify(require('child_process').exec);

// This method is called when your extension is activated
// Your extension is activated the very first time the command is executed

/**
 * @param {vscode.ExtensionContext} context
 */
function activate(context) {

	// Use the console to output diagnostic information (console.log) and errors (console.error)
	// This line of code will only be executed once when your extension is activated
	console.log('Congratulations, your extension "local-ai-commit" is now active!');

	// The command has been defined in the package.json file
	// Now provide the implementation of the command with  registerCommand
	// The commandId parameter must match the command field in package.json
	const disposable = vscode.commands.registerCommand('local-ai-commit.helloWorld', async function () {
		// The code you place here will be executed every time your command is executed
		// await exec('PROVIDER=ollama');
		process.env.PROVIDER = 'ollama';
		const workspaceFolder = vscode.workspace.rootPath;

		// Check if there are any uncommitted changes
		const { stdout, stderr } = await exec('git diff --quiet', {
			cwd: workspaceFolder,
		});

		if (stderr) {
			const userChoice = await vscode.window.showInformationMessage('No git diff provided');
			return;
		}

		const childPromise = exec('set PROVIDER=ollama && ai-commit', {
			cwd: workspaceFolder,
		});;

		let output = '';
		// Write data from PromiseResult as it appears
		childPromise.child.stdout.on('data', (data) => {
			output += data.toString();
		});
		setTimeout(async () => {
			const commit = getProposedCommit(output);
			const userChoice = await vscode.window.showInformationMessage(`Autogenerated commit suggestion`, { modal: true, detail: commit }, 'Commit');
			const userInput = userChoice === 'Commit' ? 'y\n' : 'n\n';
			console.log(childPromise.child.stdin.write(userInput));
			childPromise.child.stdin.end();
		}, 2000);

		// console.log('ai-commit task output:', stdout);
		// console.error('ai-commit task error:', stderr);
	});

	context.subscriptions.push(disposable);
}


function getProposedCommit(output) {
	const startIndex = output.indexOf('Proposed Commit:');
	console.log(startIndex);
	const endIndex = output.lastIndexOf('\n');
	console.log(endIndex);
	if (startIndex === -1 || endIndex === -1) {
		return '';
	}
	return output.slice(startIndex + 'Proposed Commit:'.length, endIndex).trim().replace(/^-+\n\s*/, '').replace(/\n-+$/, '').replace(/\n-+\n/, '\n');
}

// This method is called when your extension is deactivated
function deactivate() { }



function getWorkspaceFolder() {
	const activeTextEditor = vscode.window.activeTextEditor;
	if (!activeTextEditor) {
		return null;
	}

	const workspaceFolder = vscode.workspace.getWorkspaceFolder(activeTextEditor.document.uri);
	return workspaceFolder;
}

module.exports = {
	activate,
	deactivate
}
